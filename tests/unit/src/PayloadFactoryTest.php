<?php
namespace FOA\DomainPayload;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-25 at 12:00:53.
 */
class PayloadFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PayloadFactory
     */
    protected $factory;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->factory = new PayloadFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::newEntity
     */
    public function testNewEntity()
    {
        $expected = 'FOA\DomainPayload\NewEntity';
        $this->assertInstanceOf($expected, $this->factory->newEntity(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::found
     */
    public function testFound()
    {
        $expected = 'FOA\DomainPayload\Found';
        $this->assertInstanceOf($expected, $this->factory->found(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::notFound
     */
    public function testNotFound()
    {
        $expected = 'FOA\DomainPayload\NotFound';
        $this->assertInstanceOf($expected, $this->factory->notFound(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::valid
     */
    public function testValid()
    {
        $expected = 'FOA\DomainPayload\Valid';
        $this->assertInstanceOf($expected, $this->factory->valid(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::notValid
     */
    public function testNotValid()
    {
        $expected = 'FOA\DomainPayload\NotValid';
        $this->assertInstanceOf($expected, $this->factory->notValid(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::created
     */
    public function testCreated()
    {
        $expected = 'FOA\DomainPayload\Created';
        $this->assertInstanceOf($expected, $this->factory->created(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::notCreated
     */
    public function testNotCreated()
    {
        $expected = 'FOA\DomainPayload\NotCreated';
        $this->assertInstanceOf($expected, $this->factory->notCreated(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::updated
     */
    public function testUpdated()
    {
        $expected = 'FOA\DomainPayload\Updated';
        $this->assertInstanceOf($expected, $this->factory->updated(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::notUpdated
     */
    public function testNotUpdated()
    {
        $expected = 'FOA\DomainPayload\NotUpdated';
        $this->assertInstanceOf($expected, $this->factory->notUpdated(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::deleted
     */
    public function testDeleted()
    {
        $expected = 'FOA\DomainPayload\Deleted';
        $this->assertInstanceOf($expected, $this->factory->deleted(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::notDeleted
     */
    public function testNotDeleted()
    {
        $expected = 'FOA\DomainPayload\NotDeleted';
        $this->assertInstanceOf($expected, $this->factory->notDeleted(array('some' => 'payload', 'with' => 'values')));
    }

    /**
     * @covers FOA\DomainPayload\PayloadFactory::error
     */
    public function testError()
    {
        $expected = 'FOA\DomainPayload\Error';
        $this->assertInstanceOf($expected, $this->factory->error(array('some' => 'payload', 'with' => 'values')));
    }
}
